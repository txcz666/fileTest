<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/aop   
     					http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
     					http://www.springframework.org/schema/tx 
     					http://www.springframework.org/schema/tx/spring-tx-4.0.xsd     
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd" default-lazy-init="false">  
                        
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->  
    <context:component-scan base-package="com.videoadmin" annotation-config="true" use-default-filters="false">
    	<context:include-filter type="annotation"  expression= "org.springframework.stereotype.Controller"/>
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
    </context:component-scan>
    <bean class="com.videoadmin.utils.PropertiesUtil">
        <!-- 多数据源配置 -->
       <property name="locations">
        	<list>
        		<value>classpath:jdbc.properties</value>
        		<value>classpath:serverurl.properties</value>
        	</list>
        </property>
    </bean>  
   	<!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller--> 
    <!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->
   <!--  <mvc:annotation-driven /> -->
    <!-- 国际化文件 -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" >
			<list>
        		<value>message</value>
			</list>
       </property>
       <!-- 如果在国际化资源文件中找不到对应代码的信息，就用这个代码作为名称  -->               
   	   <property name="useCodeAsDefaultMessage" value="true" /> 
	</bean>
	<!-- AOP式方法级权限检查  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	
    <!-- 拦截器 -->
	<!-- <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
 			<mvc:exclude-mapping path="/*.ico" />
			<mvc:exclude-mapping path="/*.txt" />
			<mvc:exclude-mapping path="/static/**" /> 
			<bean class="com.videoadmin.interceptor.IndexInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors> -->
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射成json响应 -->
	 <mvc:annotation-driven>  
	   <mvc:message-converters register-defaults="true">  
	        <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
	            <constructor-arg value="UTF-8" />          
	        </bean>  
	   
	        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
	            <property name="supportedMediaTypes">  
	            	<list>  
	               		 <value>text/html;charset=UTF-8</value>
	               		 <value>text/plain;charset=UTF-8</value>  
	                     <value>application/json;charset=UTF-8</value>   
	            	</list>  
	        	</property> 
	        	
	         </bean>  
	     </mvc:message-converters>  
	  </mvc:annotation-driven>
  
    
  <!-- 定义跳转的文件的前后缀 ，视图模式配置-->  
  <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址  -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
       <property name="prefix" value="/WEB-INF/main/" />
		<property name="viewNames" value="*.html,*.jsp" />
		<property name="suffix" value=".html" />
		<property name="viewClass"
				  value="org.springframework.web.servlet.view.InternalResourceView" />
		<property name="order" value="1"></property>
   </bean>
	<!-- org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer 配置访问html页面，结合mawen中的pluges-->
    <!-- freemarker的配置 -->
	<bean id="freemarkerConfig"
		class="com.videoadmin.utils.ShiroTagFreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/main/" />
		<property name="defaultEncoding" value="utf-8" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">0</prop>
				<prop key="datetime_format">yyyy-MM-dd</prop>
				<prop key="date_format">yyyy-MM-dd</prop>
				<prop key="number_format">#.##</prop>
				<prop key="classic_compatible">true</prop>
				 <prop key="template_exception_handler">ignore</prop> 
			</props>
		</property>
	</bean>

	<!--freemarker模版引擎解析html文件,不配置,springMVC只能解析jsp前端文件,导入jar包 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"></property>
		<property name="suffix" value=".html" />
		<property name="contentType" value="text/html;charset=utf-8" />
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="exposeSpringMacroHelpers" value="true" />
		<property name="requestContextAttribute" value="request" />
		<property name="order" value="1" />
	</bean>


    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />
		<!--resolveLazily属性启用是为了推迟文件解析，以便在UploadAction 中捕获文件大小异常-->
		<property name="resolveLazily" value="true"/>
    </bean>
    
    <!-- 静态文件-->
    <mvc:resources location="/WEB-INF/main/assets/" mapping="/assets/**" />
    <mvc:resources location="/WEB-INF/main/static/" mapping="/static/**" />
	<!-- swagger -->
	<mvc:default-servlet-handler />
	<mvc:resources mapping="/404.html" location="/WEB-INF/main/404.html"/>
	<mvc:resources mapping="/500.html" location="/WEB-INF/main/500.html"/>
	<mvc:resources mapping="/illegalAccess.html" location="/WEB-INF/main/illegalAccess.html"/>
	<mvc:resources mapping="/error.html" location="/WEB-INF/main/error.html"/>
</beans>  